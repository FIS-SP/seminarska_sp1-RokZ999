{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\SP1_project\\\\frontend\\\\src\\\\pages\\\\Note.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams, usuerParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet dummyData = [{\n  \"id\": \"1\",\n  \"body\": \"Get milk\"\n}, {\n  \"id\": \"2\",\n  \"body\": \"Wash car\"\n}, {\n  \"id\": \"3\",\n  \"body\": \"Start coding\"\n}];\n\nconst Note = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  let params = useParams();\n  let noteId = match.params.id;\n  let foundNote = dummyData.find(note => note.id === noteId);\n  let [note, setNote] = useState(foundNote);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: e => {\n        setNote(e.targer.value);\n      },\n      value: note === null || note === void 0 ? void 0 : note.body,\n      placeholder: \"Enter note...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Note, \"yg/ouLavTjR5twvKsffb32njE/s=\", false, function () {\n  return [useParams];\n});\n\n_c = Note;\nexport default Note;\n\nvar _c;\n\n$RefreshReg$(_c, \"Note\");","map":{"version":3,"names":["React","useState","useParams","usuerParams","dummyData","Note","match","params","noteId","id","foundNote","find","note","setNote","e","targer","value","body"],"sources":["C:/Users/Administrator/Desktop/SP1_project/frontend/src/pages/Note.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport {useParams, usuerParams } from 'react-router-dom'\r\n\r\nlet dummyData = [{\"id\":\"1\", \"body\":\"Get milk\" }, {\"id\":\"2\", \"body\":\"Wash car\" }, {\"id\":\"3\", \"body\":\"Start coding\"}]\r\n\r\n\r\nconst Note = ({match}) => {\r\n    let params = useParams()\r\n    let noteId = match.params.id\r\n\r\n    let foundNote = dummyData.find((note) => note.id === noteId)\r\n\r\n    let [note ,setNote] = useState(foundNote)\r\n    \r\n  return (\r\n    <div>\r\n        <textarea onChange={(e) => {setNote(e.targer.value)}} value={note?.body} placeholder=\"Enter note...\"></textarea>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Note"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,SAAR,EAAmBC,WAAnB,QAAsC,kBAAtC;;AAEA,IAAIC,SAAS,GAAG,CAAC;EAAC,MAAK,GAAN;EAAW,QAAO;AAAlB,CAAD,EAAiC;EAAC,MAAK,GAAN;EAAW,QAAO;AAAlB,CAAjC,EAAiE;EAAC,MAAK,GAAN;EAAW,QAAO;AAAlB,CAAjE,CAAhB;;AAGA,MAAMC,IAAI,GAAG,QAAa;EAAA;;EAAA,IAAZ;IAACC;EAAD,CAAY;EACtB,IAAIC,MAAM,GAAGL,SAAS,EAAtB;EACA,IAAIM,MAAM,GAAGF,KAAK,CAACC,MAAN,CAAaE,EAA1B;EAEA,IAAIC,SAAS,GAAGN,SAAS,CAACO,IAAV,CAAgBC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYD,MAArC,CAAhB;EAEA,IAAI,CAACI,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAACS,SAAD,CAA9B;EAEF,oBACE;IAAA,uBACI;MAAU,QAAQ,EAAGI,CAAD,IAAO;QAACD,OAAO,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;MAAwB,CAApD;MAAsD,KAAK,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEK,IAAnE;MAAyE,WAAW,EAAC;IAArF;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAdD;;GAAMZ,I;UACWH,S;;;KADXG,I;AAgBN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}